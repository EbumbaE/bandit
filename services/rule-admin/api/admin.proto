syntax = "proto3";

package bandit.services.ruleadmin;

option go_package = "./ruleadmin";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service RuleAdminService {
  rpc GetRule(GetRuleRequest) returns (RuleResponse) {
    option (google.api.http) = {
      get: "/v1/admin/rule/{id}"
    };
  };
  rpc ChechRule(CheckRequest) returns (CheckResponse) {
    option (google.api.http) = {
      get: "/v1/admin/rule/{id}/check"
    };
  };
  rpc CreateRule(CreateRuleRequest) returns (RuleResponse) {
    option (google.api.http) = {
      post: "/v1/admin/rule"
      body: "*"
    };
  };
  rpc UpdateRule(ModifyRuleRequest) returns (RuleResponse) {
    option (google.api.http) = {
      put: "/v1/admin/rule/{id}"
      body: "*"
    };
  };
  rpc SetRuleState(SetRuleStateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/admin/rule/state/{id}"
      body: "*"
    };
  };
  rpc GetRuleServiceContext(GetRuleRequest) returns (GetRuleServiceContextResponse) {
    option (google.api.http) = {
      get: "/v1/admin/rule/{id}/context"
    };
  };

  rpc GetVariant(GetVariantRequest) returns (VariantResponse) {
    option (google.api.http) = {
      get: "/v1/admin/variant/{id}"
    };
  };
  rpc CheckVariant(CheckRequest) returns (CheckResponse) {
    option (google.api.http) = {
      get: "/v1/admin/variant/{id}/check"
    };
  };
  rpc GetVariantData(GetVariantRequest) returns (VariantResponse) {
    option (google.api.http) = {
      get: "/v1/admin/variant/{id}/data"
    };
  };
  rpc AddVariant(AddVariantRequest) returns (VariantResponse) {
    option (google.api.http) = {
      post: "/v1/admin/variant"
      body: "*"
    };
  };
  rpc RemoveVariant(GetVariantRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/admin/variant/{id}"
    };
  };
  rpc SetVariantState(SetVariantStateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/admin/variant/state/{id}"
      body: "*"
    };
  };

  rpc CreateWantedBandit(CreateWantedBanditRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/admin/wanted-registry"
      body: "*"
    };
  };
  rpc GetWantedRegistry(google.protobuf.Empty) returns (GetWantedRegistryResponse) {
    option (google.api.http) = {
      get: "/v1/admin/wanted-registry"
    };
  };
}

message Rule {
  string id = 1;
  string name = 2;
  string description = 3;
  State state = 4;
  string bandit_key = 5;
  string service = 6;
  string context = 7;
  repeated Variant variants = 8;
}

message Variant {
  string id = 1;
  string name = 2;
  bytes data = 3;
  State state = 4;
}

message GetRuleRequest {
  string id = 1;
}

message ModifyRuleRequest {
  string id = 1;
  string name = 2;
  string description = 3;
}

message CreateRuleRequest {
  string name = 1;
  string description = 2;
  string service = 3;
  string context = 4;
  repeated Variant variants = 5;
}

message SetRuleStateRequest {
  string id = 1;
  State state = 2;
}

message RuleResponse {
  Rule rule = 1;
}

message GetVariantRequest {
  string id = 1;
  string rule_id = 2;
}

message AddVariantRequest {
  string rule_id = 1;
  Variant variant = 2; 
}

message RemoveVariantRequest {
  string id = 1;
  string rule_id = 2;
}

message SetVariantStateRequest {
  string id = 1;
  string rule_id = 2;
  State state = 3;
}

message VariantResponse {
  Variant variant = 1;
}

enum State {
  RULE_STATE_UNSPECIFIED = 0;
  RULE_STATE_ENABLED = 1;
  RULE_STATE_DISABLED = 2;
}

message GetRuleServiceContextResponse {
  string service = 1;
  string context = 2;
}

message WantedBandit {
  string bandit_key = 1;
  string name = 2;
}

message CreateWantedBanditRequest {
  WantedBandit data = 1;
}

message GetWantedRegistryResponse {
  repeated WantedBandit registry = 1;
}

message CheckRequest {
  string id = 1;
  string variant_id = 2;
}

message CheckResponse {
  bool is_exist = 1;
}
