// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: rule-diller/api/diller.proto

package rulediller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuleDillerService_GetRuleStatistic_FullMethodName = "/bandit.services.rulediller.RuleDillerService/GetRuleStatistic"
	RuleDillerService_GetRuleData_FullMethodName      = "/bandit.services.rulediller.RuleDillerService/GetRuleData"
)

// RuleDillerServiceClient is the client API for RuleDillerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleDillerServiceClient interface {
	GetRuleStatistic(ctx context.Context, in *GetRuleStatisticRequest, opts ...grpc.CallOption) (*GetRuleStatisticResponse, error)
	GetRuleData(ctx context.Context, in *GetRuleDataRequest, opts ...grpc.CallOption) (*GetRuleDataResponse, error)
}

type ruleDillerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleDillerServiceClient(cc grpc.ClientConnInterface) RuleDillerServiceClient {
	return &ruleDillerServiceClient{cc}
}

func (c *ruleDillerServiceClient) GetRuleStatistic(ctx context.Context, in *GetRuleStatisticRequest, opts ...grpc.CallOption) (*GetRuleStatisticResponse, error) {
	out := new(GetRuleStatisticResponse)
	err := c.cc.Invoke(ctx, RuleDillerService_GetRuleStatistic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleDillerServiceClient) GetRuleData(ctx context.Context, in *GetRuleDataRequest, opts ...grpc.CallOption) (*GetRuleDataResponse, error) {
	out := new(GetRuleDataResponse)
	err := c.cc.Invoke(ctx, RuleDillerService_GetRuleData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleDillerServiceServer is the server API for RuleDillerService service.
// All implementations must embed UnimplementedRuleDillerServiceServer
// for forward compatibility
type RuleDillerServiceServer interface {
	GetRuleStatistic(context.Context, *GetRuleStatisticRequest) (*GetRuleStatisticResponse, error)
	GetRuleData(context.Context, *GetRuleDataRequest) (*GetRuleDataResponse, error)
	mustEmbedUnimplementedRuleDillerServiceServer()
}

// UnimplementedRuleDillerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuleDillerServiceServer struct {
}

func (UnimplementedRuleDillerServiceServer) GetRuleStatistic(context.Context, *GetRuleStatisticRequest) (*GetRuleStatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleStatistic not implemented")
}
func (UnimplementedRuleDillerServiceServer) GetRuleData(context.Context, *GetRuleDataRequest) (*GetRuleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleData not implemented")
}
func (UnimplementedRuleDillerServiceServer) mustEmbedUnimplementedRuleDillerServiceServer() {}

// UnsafeRuleDillerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleDillerServiceServer will
// result in compilation errors.
type UnsafeRuleDillerServiceServer interface {
	mustEmbedUnimplementedRuleDillerServiceServer()
}

func RegisterRuleDillerServiceServer(s grpc.ServiceRegistrar, srv RuleDillerServiceServer) {
	s.RegisterService(&RuleDillerService_ServiceDesc, srv)
}

func _RuleDillerService_GetRuleStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleDillerServiceServer).GetRuleStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleDillerService_GetRuleStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleDillerServiceServer).GetRuleStatistic(ctx, req.(*GetRuleStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleDillerService_GetRuleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleDillerServiceServer).GetRuleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleDillerService_GetRuleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleDillerServiceServer).GetRuleData(ctx, req.(*GetRuleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleDillerService_ServiceDesc is the grpc.ServiceDesc for RuleDillerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleDillerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bandit.services.rulediller.RuleDillerService",
	HandlerType: (*RuleDillerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRuleStatistic",
			Handler:    _RuleDillerService_GetRuleStatistic_Handler,
		},
		{
			MethodName: "GetRuleData",
			Handler:    _RuleDillerService_GetRuleData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rule-diller/api/diller.proto",
}
