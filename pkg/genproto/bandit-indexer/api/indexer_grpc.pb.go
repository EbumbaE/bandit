// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: bandit-indexer/api/indexer.proto

package banditindexer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BanditIndexerService_GetRuleScores_FullMethodName = "/bandit.services.banditindexer.BanditIndexerService/GetRuleScores"
)

// BanditIndexerServiceClient is the client API for BanditIndexerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BanditIndexerServiceClient interface {
	GetRuleScores(ctx context.Context, in *GetRuleScoresRequest, opts ...grpc.CallOption) (*GetRuleScoresResponse, error)
}

type banditIndexerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBanditIndexerServiceClient(cc grpc.ClientConnInterface) BanditIndexerServiceClient {
	return &banditIndexerServiceClient{cc}
}

func (c *banditIndexerServiceClient) GetRuleScores(ctx context.Context, in *GetRuleScoresRequest, opts ...grpc.CallOption) (*GetRuleScoresResponse, error) {
	out := new(GetRuleScoresResponse)
	err := c.cc.Invoke(ctx, BanditIndexerService_GetRuleScores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BanditIndexerServiceServer is the server API for BanditIndexerService service.
// All implementations must embed UnimplementedBanditIndexerServiceServer
// for forward compatibility
type BanditIndexerServiceServer interface {
	GetRuleScores(context.Context, *GetRuleScoresRequest) (*GetRuleScoresResponse, error)
	mustEmbedUnimplementedBanditIndexerServiceServer()
}

// UnimplementedBanditIndexerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBanditIndexerServiceServer struct {
}

func (UnimplementedBanditIndexerServiceServer) GetRuleScores(context.Context, *GetRuleScoresRequest) (*GetRuleScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleScores not implemented")
}
func (UnimplementedBanditIndexerServiceServer) mustEmbedUnimplementedBanditIndexerServiceServer() {}

// UnsafeBanditIndexerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BanditIndexerServiceServer will
// result in compilation errors.
type UnsafeBanditIndexerServiceServer interface {
	mustEmbedUnimplementedBanditIndexerServiceServer()
}

func RegisterBanditIndexerServiceServer(s grpc.ServiceRegistrar, srv BanditIndexerServiceServer) {
	s.RegisterService(&BanditIndexerService_ServiceDesc, srv)
}

func _BanditIndexerService_GetRuleScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanditIndexerServiceServer).GetRuleScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BanditIndexerService_GetRuleScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanditIndexerServiceServer).GetRuleScores(ctx, req.(*GetRuleScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BanditIndexerService_ServiceDesc is the grpc.ServiceDesc for BanditIndexerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BanditIndexerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bandit.services.banditindexer.BanditIndexerService",
	HandlerType: (*BanditIndexerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRuleScores",
			Handler:    _BanditIndexerService_GetRuleScores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bandit-indexer/api/indexer.proto",
}
