// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: rule-test/api/test.proto

package ruletest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuleTestService_DoLoadTest_FullMethodName       = "/bandit.services.ruletest.RuleTestService/DoLoadTest"
	RuleTestService_DoEfficiencyTest_FullMethodName = "/bandit.services.ruletest.RuleTestService/DoEfficiencyTest"
)

// RuleTestServiceClient is the client API for RuleTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleTestServiceClient interface {
	DoLoadTest(ctx context.Context, in *LoadTestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DoEfficiencyTest(ctx context.Context, in *EfficiencyTestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ruleTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleTestServiceClient(cc grpc.ClientConnInterface) RuleTestServiceClient {
	return &ruleTestServiceClient{cc}
}

func (c *ruleTestServiceClient) DoLoadTest(ctx context.Context, in *LoadTestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuleTestService_DoLoadTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleTestServiceClient) DoEfficiencyTest(ctx context.Context, in *EfficiencyTestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuleTestService_DoEfficiencyTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleTestServiceServer is the server API for RuleTestService service.
// All implementations must embed UnimplementedRuleTestServiceServer
// for forward compatibility
type RuleTestServiceServer interface {
	DoLoadTest(context.Context, *LoadTestRequest) (*emptypb.Empty, error)
	DoEfficiencyTest(context.Context, *EfficiencyTestRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRuleTestServiceServer()
}

// UnimplementedRuleTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuleTestServiceServer struct {
}

func (UnimplementedRuleTestServiceServer) DoLoadTest(context.Context, *LoadTestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoLoadTest not implemented")
}
func (UnimplementedRuleTestServiceServer) DoEfficiencyTest(context.Context, *EfficiencyTestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoEfficiencyTest not implemented")
}
func (UnimplementedRuleTestServiceServer) mustEmbedUnimplementedRuleTestServiceServer() {}

// UnsafeRuleTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleTestServiceServer will
// result in compilation errors.
type UnsafeRuleTestServiceServer interface {
	mustEmbedUnimplementedRuleTestServiceServer()
}

func RegisterRuleTestServiceServer(s grpc.ServiceRegistrar, srv RuleTestServiceServer) {
	s.RegisterService(&RuleTestService_ServiceDesc, srv)
}

func _RuleTestService_DoLoadTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleTestServiceServer).DoLoadTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleTestService_DoLoadTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleTestServiceServer).DoLoadTest(ctx, req.(*LoadTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleTestService_DoEfficiencyTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EfficiencyTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleTestServiceServer).DoEfficiencyTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleTestService_DoEfficiencyTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleTestServiceServer).DoEfficiencyTest(ctx, req.(*EfficiencyTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleTestService_ServiceDesc is the grpc.ServiceDesc for RuleTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bandit.services.ruletest.RuleTestService",
	HandlerType: (*RuleTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoLoadTest",
			Handler:    _RuleTestService_DoLoadTest_Handler,
		},
		{
			MethodName: "DoEfficiencyTest",
			Handler:    _RuleTestService_DoEfficiencyTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rule-test/api/test.proto",
}
