// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: rule-admin/api/admin.proto

package ruleadmin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuleAdminService_GetRule_FullMethodName               = "/bandit.services.ruleadmin.RuleAdminService/GetRule"
	RuleAdminService_CheckRule_FullMethodName             = "/bandit.services.ruleadmin.RuleAdminService/CheckRule"
	RuleAdminService_CreateRule_FullMethodName            = "/bandit.services.ruleadmin.RuleAdminService/CreateRule"
	RuleAdminService_UpdateRule_FullMethodName            = "/bandit.services.ruleadmin.RuleAdminService/UpdateRule"
	RuleAdminService_SetRuleState_FullMethodName          = "/bandit.services.ruleadmin.RuleAdminService/SetRuleState"
	RuleAdminService_GetRuleServiceContext_FullMethodName = "/bandit.services.ruleadmin.RuleAdminService/GetRuleServiceContext"
	RuleAdminService_GetVariant_FullMethodName            = "/bandit.services.ruleadmin.RuleAdminService/GetVariant"
	RuleAdminService_CheckVariant_FullMethodName          = "/bandit.services.ruleadmin.RuleAdminService/CheckVariant"
	RuleAdminService_GetVariantData_FullMethodName        = "/bandit.services.ruleadmin.RuleAdminService/GetVariantData"
	RuleAdminService_AddVariant_FullMethodName            = "/bandit.services.ruleadmin.RuleAdminService/AddVariant"
	RuleAdminService_SetVariantState_FullMethodName       = "/bandit.services.ruleadmin.RuleAdminService/SetVariantState"
	RuleAdminService_CreateWantedBandit_FullMethodName    = "/bandit.services.ruleadmin.RuleAdminService/CreateWantedBandit"
	RuleAdminService_GetWantedRegistry_FullMethodName     = "/bandit.services.ruleadmin.RuleAdminService/GetWantedRegistry"
)

// RuleAdminServiceClient is the client API for RuleAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleAdminServiceClient interface {
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	CheckRule(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	UpdateRule(ctx context.Context, in *ModifyRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	SetRuleState(ctx context.Context, in *SetRuleStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRuleServiceContext(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleServiceContextResponse, error)
	GetVariant(ctx context.Context, in *GetVariantRequest, opts ...grpc.CallOption) (*VariantResponse, error)
	CheckVariant(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	GetVariantData(ctx context.Context, in *GetVariantRequest, opts ...grpc.CallOption) (*VariantResponse, error)
	AddVariant(ctx context.Context, in *AddVariantRequest, opts ...grpc.CallOption) (*VariantResponse, error)
	// TODO
	//
	//	rpc RemoveVariant(GetVariantRequest) returns (google.protobuf.Empty) {
	//	  option (google.api.http) = {
	//	    delete: "/v1/admin/variant/{id}"
	//	  };
	//	};
	SetVariantState(ctx context.Context, in *SetVariantStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateWantedBandit(ctx context.Context, in *CreateWantedBanditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWantedRegistry(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWantedRegistryResponse, error)
}

type ruleAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleAdminServiceClient(cc grpc.ClientConnInterface) RuleAdminServiceClient {
	return &ruleAdminServiceClient{cc}
}

func (c *ruleAdminServiceClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, RuleAdminService_GetRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) CheckRule(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, RuleAdminService_CheckRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, RuleAdminService_CreateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) UpdateRule(ctx context.Context, in *ModifyRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, RuleAdminService_UpdateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) SetRuleState(ctx context.Context, in *SetRuleStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuleAdminService_SetRuleState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) GetRuleServiceContext(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleServiceContextResponse, error) {
	out := new(GetRuleServiceContextResponse)
	err := c.cc.Invoke(ctx, RuleAdminService_GetRuleServiceContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) GetVariant(ctx context.Context, in *GetVariantRequest, opts ...grpc.CallOption) (*VariantResponse, error) {
	out := new(VariantResponse)
	err := c.cc.Invoke(ctx, RuleAdminService_GetVariant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) CheckVariant(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, RuleAdminService_CheckVariant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) GetVariantData(ctx context.Context, in *GetVariantRequest, opts ...grpc.CallOption) (*VariantResponse, error) {
	out := new(VariantResponse)
	err := c.cc.Invoke(ctx, RuleAdminService_GetVariantData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) AddVariant(ctx context.Context, in *AddVariantRequest, opts ...grpc.CallOption) (*VariantResponse, error) {
	out := new(VariantResponse)
	err := c.cc.Invoke(ctx, RuleAdminService_AddVariant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) SetVariantState(ctx context.Context, in *SetVariantStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuleAdminService_SetVariantState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) CreateWantedBandit(ctx context.Context, in *CreateWantedBanditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuleAdminService_CreateWantedBandit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleAdminServiceClient) GetWantedRegistry(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWantedRegistryResponse, error) {
	out := new(GetWantedRegistryResponse)
	err := c.cc.Invoke(ctx, RuleAdminService_GetWantedRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleAdminServiceServer is the server API for RuleAdminService service.
// All implementations must embed UnimplementedRuleAdminServiceServer
// for forward compatibility
type RuleAdminServiceServer interface {
	GetRule(context.Context, *GetRuleRequest) (*RuleResponse, error)
	CheckRule(context.Context, *CheckRequest) (*CheckResponse, error)
	CreateRule(context.Context, *CreateRuleRequest) (*RuleResponse, error)
	UpdateRule(context.Context, *ModifyRuleRequest) (*RuleResponse, error)
	SetRuleState(context.Context, *SetRuleStateRequest) (*emptypb.Empty, error)
	GetRuleServiceContext(context.Context, *GetRuleRequest) (*GetRuleServiceContextResponse, error)
	GetVariant(context.Context, *GetVariantRequest) (*VariantResponse, error)
	CheckVariant(context.Context, *CheckRequest) (*CheckResponse, error)
	GetVariantData(context.Context, *GetVariantRequest) (*VariantResponse, error)
	AddVariant(context.Context, *AddVariantRequest) (*VariantResponse, error)
	// TODO
	//
	//	rpc RemoveVariant(GetVariantRequest) returns (google.protobuf.Empty) {
	//	  option (google.api.http) = {
	//	    delete: "/v1/admin/variant/{id}"
	//	  };
	//	};
	SetVariantState(context.Context, *SetVariantStateRequest) (*emptypb.Empty, error)
	CreateWantedBandit(context.Context, *CreateWantedBanditRequest) (*emptypb.Empty, error)
	GetWantedRegistry(context.Context, *emptypb.Empty) (*GetWantedRegistryResponse, error)
	mustEmbedUnimplementedRuleAdminServiceServer()
}

// UnimplementedRuleAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuleAdminServiceServer struct {
}

func (UnimplementedRuleAdminServiceServer) GetRule(context.Context, *GetRuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedRuleAdminServiceServer) CheckRule(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRule not implemented")
}
func (UnimplementedRuleAdminServiceServer) CreateRule(context.Context, *CreateRuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedRuleAdminServiceServer) UpdateRule(context.Context, *ModifyRuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedRuleAdminServiceServer) SetRuleState(context.Context, *SetRuleStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRuleState not implemented")
}
func (UnimplementedRuleAdminServiceServer) GetRuleServiceContext(context.Context, *GetRuleRequest) (*GetRuleServiceContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleServiceContext not implemented")
}
func (UnimplementedRuleAdminServiceServer) GetVariant(context.Context, *GetVariantRequest) (*VariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariant not implemented")
}
func (UnimplementedRuleAdminServiceServer) CheckVariant(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVariant not implemented")
}
func (UnimplementedRuleAdminServiceServer) GetVariantData(context.Context, *GetVariantRequest) (*VariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariantData not implemented")
}
func (UnimplementedRuleAdminServiceServer) AddVariant(context.Context, *AddVariantRequest) (*VariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVariant not implemented")
}
func (UnimplementedRuleAdminServiceServer) SetVariantState(context.Context, *SetVariantStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariantState not implemented")
}
func (UnimplementedRuleAdminServiceServer) CreateWantedBandit(context.Context, *CreateWantedBanditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWantedBandit not implemented")
}
func (UnimplementedRuleAdminServiceServer) GetWantedRegistry(context.Context, *emptypb.Empty) (*GetWantedRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWantedRegistry not implemented")
}
func (UnimplementedRuleAdminServiceServer) mustEmbedUnimplementedRuleAdminServiceServer() {}

// UnsafeRuleAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleAdminServiceServer will
// result in compilation errors.
type UnsafeRuleAdminServiceServer interface {
	mustEmbedUnimplementedRuleAdminServiceServer()
}

func RegisterRuleAdminServiceServer(s grpc.ServiceRegistrar, srv RuleAdminServiceServer) {
	s.RegisterService(&RuleAdminService_ServiceDesc, srv)
}

func _RuleAdminService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_GetRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).GetRule(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_CheckRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).CheckRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_CheckRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).CheckRule(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_CreateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_UpdateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).UpdateRule(ctx, req.(*ModifyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_SetRuleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRuleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).SetRuleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_SetRuleState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).SetRuleState(ctx, req.(*SetRuleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_GetRuleServiceContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).GetRuleServiceContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_GetRuleServiceContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).GetRuleServiceContext(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_GetVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).GetVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_GetVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).GetVariant(ctx, req.(*GetVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_CheckVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).CheckVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_CheckVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).CheckVariant(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_GetVariantData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).GetVariantData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_GetVariantData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).GetVariantData(ctx, req.(*GetVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_AddVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).AddVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_AddVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).AddVariant(ctx, req.(*AddVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_SetVariantState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVariantStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).SetVariantState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_SetVariantState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).SetVariantState(ctx, req.(*SetVariantStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_CreateWantedBandit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWantedBanditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).CreateWantedBandit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_CreateWantedBandit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).CreateWantedBandit(ctx, req.(*CreateWantedBanditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAdminService_GetWantedRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleAdminServiceServer).GetWantedRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleAdminService_GetWantedRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleAdminServiceServer).GetWantedRegistry(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleAdminService_ServiceDesc is the grpc.ServiceDesc for RuleAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bandit.services.ruleadmin.RuleAdminService",
	HandlerType: (*RuleAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRule",
			Handler:    _RuleAdminService_GetRule_Handler,
		},
		{
			MethodName: "CheckRule",
			Handler:    _RuleAdminService_CheckRule_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _RuleAdminService_CreateRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _RuleAdminService_UpdateRule_Handler,
		},
		{
			MethodName: "SetRuleState",
			Handler:    _RuleAdminService_SetRuleState_Handler,
		},
		{
			MethodName: "GetRuleServiceContext",
			Handler:    _RuleAdminService_GetRuleServiceContext_Handler,
		},
		{
			MethodName: "GetVariant",
			Handler:    _RuleAdminService_GetVariant_Handler,
		},
		{
			MethodName: "CheckVariant",
			Handler:    _RuleAdminService_CheckVariant_Handler,
		},
		{
			MethodName: "GetVariantData",
			Handler:    _RuleAdminService_GetVariantData_Handler,
		},
		{
			MethodName: "AddVariant",
			Handler:    _RuleAdminService_AddVariant_Handler,
		},
		{
			MethodName: "SetVariantState",
			Handler:    _RuleAdminService_SetVariantState_Handler,
		},
		{
			MethodName: "CreateWantedBandit",
			Handler:    _RuleAdminService_CreateWantedBandit_Handler,
		},
		{
			MethodName: "GetWantedRegistry",
			Handler:    _RuleAdminService_GetWantedRegistry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rule-admin/api/admin.proto",
}
